git config --global user.name
git config --global user.email

// to initialis the git 
git init 
git status 
git commit -m "initial commit" 
//nothing to commit 

//create the new  file 

git status 
//new files created 

git add -A (adding all the files to the git repos)

git commit -m "added new file"

git status   // nothing to commit 

git checkout -f // can restore the last modified version of the file from repos 

git log 

git log -p -2 // to display only the last 2 commit 

git diff // compares the current changes on the file from the git repos 
 display the changes 

git diff -- staged //compares from current staged changes to current commit 
it reflects the changes from the commit to current changes but before git add . 


git checkout -f

git commit -a -m // it is the combination of both "git add ." and "git commit -m" command
means using this command we can staged the file as well commits 
means it reflects the changes from  the last commit to after present git add .
----------------------------------------------------------------
git remote add origin "ssh" of  the repos

git push -u origin master 

hye this is the git command 
and i am raj to do this
hye to all
----------------------------------------------------------------------------

Removing the file from the current directory as well as from the staging area 

git rm  // remove the file from both the local disk as well from the git staged area 

git rm --cached // remove the file from only the git staged area 
  
----------------------------------------------------------------------------------

the short version of the git status 
means 

git status -s 

This command gives the details in the short version 
green M reflects staged
red M reflects unstaged the changes 

------------------------------------------------------------------------------------------

.gitignore
it is the file which stores those files which doesnt need to display in the staging area 
the confidential file need to be store in the gitignore file
those files which are not essential for the user need to be stores in the gitignore file to make the 
pull and push processing faster

if we do have multiples log file (*.log) at different path of the root dir the 
*.log  ignores all the log files of the current dir 

if waana to ignore the single file then specify the full path of the file 
 i.e.
 /mylog.log ignores the root dir log files .. u can make the pattern of the path of the file to 
  which u wanna ignore and will store in the .gitignore file 

	if need to ignore the folder in the gitignore file 
	then write folder_name/ in the gitignore file 

--------------------------------------------------------------------------------------------

branches

1) git branch
returns the current branch 

for ex 
  git branch 
   * master 
to create the new branch we have
 git branch <branch_name>
ex 
2)  git branch shilsha
 
if command 
   git branch 
  o/p
     * master 
	shilsha
 
we are now currently active in the master branch (*) to move to another branch we have command 
git checkout <branch_name>
ex 
3) git checkout shilsha // move to shilsha branch from master 
  switched to branch shilsha 
4) merging the branch from the master branch 
to merge shilsha branch from the master branch we have 

i) first move to the master branch 
    git checkout master 
ii) and then run the git merge command 
     git merge shilsha
      

3) git checkout -b nodejs 
//create the new branch name nodejs and move to it 
 directly to it 






	 


   





